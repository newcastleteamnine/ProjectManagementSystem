Use a Password Hashing Algorithm

There are algorithms designed specifically for this purpose. The two in common use are pbkdf2 and bcrypt. Both of these algorithms use a technique called Key Stretching, which essentially involves repeatedly running a one-way function on the input. They are designed to be expensive to compute, protecting you from brute-force and wordlist attacks. Additionally, both algorithms come with an adjustable work factor, and so can be made harder as computers get faster.

Also, nobody would let me forget about scrypt, so Iâ€™m going to mention it now.
PHP

<?php
// PHP has had a built-in password_hash function since 5.5.0
// It's currently based on BCRYPT, but pass PASSWORD_BCRYPT
// to ensure this doesn't change.

// Generate a password using a random salt
password_hash($password, PASSWORD_BCRYPT);

// Generate a password with a known salt.
password_hash($password, PASSWORD_BCRYPT, array("salt" => $salt));


// Before 5.5:
// 5.3.7 and on: use $2y$ as the salt prefix
// Otherwise, use $2x$
// This will cause crypt to generate a bcrypt hash
$salt = '$2y$10$' . mcrypt_create_iv(22);
$salted_password = crypt($password, $salt)

// Both algorithms generate a 60-character string that looks like:
// $salt . $hashed_password
